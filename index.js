import './keep_alive.js';
// ticket_bot/index.js
import { Client, GatewayIntentBits, Partials, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, PermissionsBitField, REST, Routes, SlashCommandBuilder } from 'discord.js';
import dotenv from 'dotenv';
dotenv.config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers
  ],
  partials: [Partials.Channel]
});

const ADMIN_IDS = ['845277573654380555', '1054470308112900126'];
const APPLICATION_CHANNEL_ID = '1390301425984081960';
const SUPPORT_CHANNEL_ID = '1390325195935584296';

client.once('ready', () => {
  console.log(`üîó Logged in as ${client.user.tag}`);
});

client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand() && !interaction.isButton()) return;

  if (interaction.isChatInputCommand() && interaction.commandName === 'ticketsetup') {
    const userId = interaction.user.id;
    if (!ADMIN_IDS.includes(userId)) {
      await interaction.reply({ content: '‚ùå –õ–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É.', ephemeral: true });
      return;
    }

    const appChannel = client.channels.cache.get(APPLICATION_CHANNEL_ID);
    const supportChannel = client.channels.cache.get(SUPPORT_CHANNEL_ID);

    if (!appChannel || !supportChannel) {
      await interaction.reply({ content: '‚ùå –û–¥–∏–Ω –∞–±–æ –æ–±–∏–¥–≤–∞ –∫–∞–Ω–∞–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', ephemeral: true });
      return;
    }

    const applicationEmbed = new EmbedBuilder()
      .setTitle('–Ø–∫ –∑–∞–π—Ç–∏?')
      .setDescription(`–ü–æ–¥–∞–π—Ç–µ **–∑–∞—è–≤–∫—É** –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—Ä–∏–Ω—É—Ç–∏ –≤ —Å–≤—ñ—Ç –º–æ–¥—É **Create** –Ω–∞ **SunRise:Create**\n–ó–∞—è–≤–∫–∏ —Ä–æ–∑–¥–∏–≤–ª—è—é—Ç—å—Å—è –¥–æ **24 –≥–æ–¥–∏–Ω**`)
      .setImage('https://cdn.discordapp.com/attachments/1390316873450782793/1391775926559441016/i-made-a-traction-town-in-minecraft-using-the-create-mod-v0-wgf62t5li2sc1_2.png?ex=686d1fd6&is=686bce56&hm=f97cddf259dbe6a684d254246e6adc19fdaaee51a85fcfacfd67d17f07e67cd7&')
      .setFooter({ text: 'SunRise:Create ‚Ä¢ –ü–æ—Ä–∏–Ω—å —É —Å–≤—ñ—Ç –º–æ–¥—É Create!' })
      .setColor(0xE0A000);

    const applicationButton = new ButtonBuilder()
      .setCustomId('create_application_ticket')
      .setLabel('üì© –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É!')
      .setStyle(ButtonStyle.Primary);

    const applicationRow = new ActionRowBuilder().addComponents(applicationButton);

    await appChannel.send({
      embeds: [applicationEmbed],
      components: [applicationRow]
    });

    const supportEmbed = new EmbedBuilder()
      .setTitle('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞')
      .setDescription(`–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ **–¥–æ–ø–æ–º–æ–≥—É** –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä—É **SunRise:Create**\n–í—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –≤ –º–µ–∂–∞—Ö **24 –≥–æ–¥–∏–Ω**`)
      .setImage('https://cdn.discordapp.com/attachments/1390316873450782793/1390336690303930378/2023-08-30_15.20.02.png?ex=686c80b2&is=686b2f32&hm=115ddf706ef7b1fef272a8ed73b4b8b40097291042ff9a8bb543439295d81ad9&')
      .setFooter({ text: 'SunRise:Create ‚Ä¢ –ó–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏!' })
      .setColor(0x00B38F);

    const supportButton = new ButtonBuilder()
      .setCustomId('create_support_ticket')
      .setLabel('üì® –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç!')
      .setStyle(ButtonStyle.Success);

    const supportRow = new ActionRowBuilder().addComponents(supportButton);

    await supportChannel.send({
      embeds: [supportEmbed],
      components: [supportRow]
    });

    await interaction.reply({ content: '‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞—è–≤–∫–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ', ephemeral: true });
  }

  // ... —Ä–µ—à—Ç–∞ –∫–æ–¥—É –±–µ–∑ –∑–º—ñ–Ω ...
});

// —Ä–µ—à—Ç–∞ –∫–æ–¥—É –Ω–∏–∂—á–µ –∑–∞–ª–∏—à–∏–ª–∞—Å—å –Ω–µ–∑–º—ñ–Ω–Ω–æ—é
const commands = [
  new SlashCommandBuilder()
    .setName('ticketsetup')
    .setDescription('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—ñ–≤')
].map(command => command.toJSON());

const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);

(async () => {
  try {
    console.log('üîÑ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥...');
    await rest.put(
      Routes.applicationCommands(process.env.CLIENT_ID),
      { body: commands }
    );
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥:', error);
  }
})();

client.login(process.env.DISCORD_TOKEN);
