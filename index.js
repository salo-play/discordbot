import {
  Client,
  GatewayIntentBits,
  Partials,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
  PermissionsBitField,
  REST,
  Routes,
  SlashCommandBuilder
} from 'discord.js';
import dotenv from 'dotenv';
import express from 'express';
dotenv.config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers
  ],
  partials: [Partials.Channel]
});

const ADMIN_IDS = ['845277573654380555', '1054470308112900126'];
const APPLICATION_CHANNEL_ID = '1390301425984081960';
const SUPPORT_CHANNEL_ID = '1390325195935584296';
const ACCEPT_ROLE_ID = '1390325276159770786';

client.once('ready', () => {
  console.log(`üîó Logged in as ${client.user.tag}`);
});

client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand() && !interaction.isButton()) return;

  // /ticketsetup
  if (interaction.isChatInputCommand() && interaction.commandName === 'ticketsetup') {
    if (!ADMIN_IDS.includes(interaction.user.id)) {
      return interaction.reply({ content: '‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è.', ephemeral: true });
    }

    const appChannel = client.channels.cache.get(APPLICATION_CHANNEL_ID);
    const supportChannel = client.channels.cache.get(SUPPORT_CHANNEL_ID);

    if (!appChannel || !supportChannel) {
      return interaction.reply({ content: '‚ùå –ö–∞–Ω–∞–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', ephemeral: true });
    }

    const applicationEmbed = new EmbedBuilder()
      .setTitle('–Ø–∫ –∑–∞–π—Ç–∏?')
      .setDescription(`–ü–æ–¥–∞–π—Ç–µ **–∑–∞—è–≤–∫—É**, —â–æ–± –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä **Cognia**\n–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ—Ç—è–≥–æ–º **24 –≥–æ–¥–∏–Ω**`)
      .setImage('https://cdn.discordapp.com/attachments/1390316873450782793/1391775926559441016/i-made-a-traction-town-in-minecraft-using-the-create-mod-v0-wgf62t5li2sc1_2.png')
      .setFooter({ text: 'Cognia ‚Ä¢ –ü–æ—Ä–∏–Ω—å —É —Å–≤—ñ—Ç –º–æ–¥—É Create!' })
      .setColor(0xe29549);

    const applicationButton = new ButtonBuilder()
      .setCustomId('create_application_ticket')
      .setLabel('üì© –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É!')
      .setStyle(ButtonStyle.Primary);

    const supportEmbed = new EmbedBuilder()
      .setTitle('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞')
      .setDescription(`–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.\n–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ—Ç—è–≥–æ–º **24 –≥–æ–¥–∏–Ω**`)
      .setImage('https://cdn.discordapp.com/attachments/1390316873450782793/1390336690303930378/2023-08-30_15.20.02.png')
      .setFooter({ text: 'Cognia ‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞' })
      .setColor(0xe29549);

    const supportButton = new ButtonBuilder()
      .setCustomId('create_support_ticket')
      .setLabel('üì® –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç!')
      .setStyle(ButtonStyle.Success);

    await appChannel.send({
      embeds: [applicationEmbed],
      components: [new ActionRowBuilder().addComponents(applicationButton)]
    });

    await supportChannel.send({
      embeds: [supportEmbed],
      components: [new ActionRowBuilder().addComponents(supportButton)]
    });

    await interaction.reply({ content: '‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ', ephemeral: true });
  }

  // –ö–Ω–æ–ø–∫–∏ –ü—Ä–∏–π–Ω—è—Ç–∏/–í—ñ–¥—Ö–∏–ª–∏—Ç–∏
  if (interaction.isButton()) {
    const guild = interaction.guild;
    if (!guild) return;

    if (interaction.customId.startsWith('accept_application_')) {
      if (!ADMIN_IDS.includes(interaction.user.id)) {
        return interaction.reply({ content: '‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è.', ephemeral: true });
      }

      const memberId = interaction.customId.split('_').pop();
      const member = await guild.members.fetch(memberId).catch(() => null);

      if (!member) {
        return interaction.reply({ content: '‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', ephemeral: true });
      }

      await member.roles.add(ACCEPT_ROLE_ID).catch(console.error);
      await interaction.reply({ content: `‚úÖ –ó–∞—è–≤–∫–∞ <@${memberId}> –ø—Ä–∏–π–Ω—è—Ç–∞. –ì–∞—Ä–Ω–æ—ó –≤–∞–º –≥—Ä–∏!`, ephemeral: false });
      return;
    }

    if (interaction.customId.startsWith('deny_application_')) {
      if (!ADMIN_IDS.includes(interaction.user.id)) {
        return interaction.reply({ content: '‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è.', ephemeral: true });
      }

      await interaction.reply({ content: '‚ùå –ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞. –ö–∞–Ω–∞–ª –∑–∞–∫—Ä–∏—î—Ç—å—Å—è.', ephemeral: false });
      setTimeout(() => {
        interaction.channel?.delete().catch(console.error);
      }, 5000);
      return;
    }

    if (interaction.customId === 'close_ticket') {
      await interaction.reply({ content: '‚úÖ –¢—ñ–∫–µ—Ç –±—É–¥–µ –∑–∞–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫.', ephemeral: true });
      setTimeout(() => {
        interaction.channel?.delete().catch(console.error);
      }, 5000);
      return;
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É
    const isApp = interaction.customId === 'create_application_ticket';
    const username = interaction.user.username.replace(/[^a-zA-Z0-9]/g, '-');
    const existing = guild.channels.cache.find(c =>
      c.name === (isApp ? `–∑–∞—è–≤–∫–∞-${username}` : `–ø—ñ–¥—Ç—Ä–∏–º–∫–∞-${username}`)
    );

    if (existing) {
      return interaction.reply({ content: `‚ùå –£ –≤–∞—Å –≤–∂–µ —î –≤—ñ–¥–∫—Ä–∏—Ç–∏–π/–∞ ${isApp ? '–∑–∞—è–≤–∫–∞' : '—Ç—ñ–∫–µ—Ç'}.`, ephemeral: true });
    }

    const overwrites = [
      {
        id: guild.roles.everyone,
        deny: [PermissionsBitField.Flags.ViewChannel]
      },
      {
        id: interaction.user.id,
        allow: [
          PermissionsBitField.Flags.ViewChannel,
          PermissionsBitField.Flags.SendMessages,
          PermissionsBitField.Flags.ReadMessageHistory
        ]
      }
    ];

    for (const adminId of ADMIN_IDS) {
      try {
        const admin = await guild.members.fetch(adminId);
        overwrites.push({
          id: admin.id,
          allow: [
            PermissionsBitField.Flags.ViewChannel,
            PermissionsBitField.Flags.SendMessages,
            PermissionsBitField.Flags.ReadMessageHistory
          ]
        });
      } catch (err) {
        console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ ${adminId}`);
      }
    }

    const channel = await guild.channels.create({
      name: `${isApp ? '–∑–∞—è–≤–∫–∞' : '–ø—ñ–¥—Ç—Ä–∏–º–∫–∞'}-${username}`,
      type: 0,
      permissionOverwrites: overwrites
    });

    if (isApp) {
      const embed = new EmbedBuilder()
        .setTitle('‚úÖ –ó–∞—è–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ')
        .setDescription("–§–æ—Ä–º–∞ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏:\n\n–ù—ñ–∫–Ω–µ–π–º\n–í—ñ–∫\n–°–µ–∫—Ä–µ—Ç–Ω–µ —Å–ª–æ–≤–æ –∑ –ø—Ä–∞–≤–∏–ª\n\n–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –∞–±–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É.")
        .setImage('https://cdn.discordapp.com/attachments/1390316873450782793/1391911325155987466/c8132ccdaa6f629620ac954d6c9296f7_1.png?ex=686d9df0&is=686c4c70&hm=1df433562f4afa2faf89e78fa51255452c2b4a98ca446b81b831722733cd6085&')
        .setColor(0xe29549)
        .setFooter({ text: 'Cognia ‚Ä¢ –ü–æ—Ä–∏–Ω—å —É —Å–≤—ñ—Ç –º–æ–¥—É Create!' });

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId(`accept_application_${interaction.user.id}`)
          .setLabel('‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏')
          .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
          .setCustomId(`deny_application_${interaction.user.id}`)
          .setLabel('‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏')
          .setStyle(ButtonStyle.Danger)
      );

      await channel.send({ content: `<@${interaction.user.id}>`, embeds: [embed], components: [row] });
    } else {
      const embed = new EmbedBuilder()
        .setTitle('üîß –ü—ñ–¥—Ç—Ä–∏–º–∫–∞')
        .setDescription('–û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –Ω–∏–∂—á–µ.\n‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –∑–∞–∫—Ä–∏–≤–∞–π—Ç–µ —Ç—ñ–∫–µ—Ç')
        .setImage('https://cdn.discordapp.com/attachments/1390316873450782793/1390336690303930378/2023-08-30_15.20.02.png')
        .setColor(0xe29549)
        .setFooter({ text: 'Cognia ‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞' });

      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId('close_ticket')
          .setLabel("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ (–í–∏–¥–∞–ª–∏—Ç–∏)")
          .setStyle(ButtonStyle.Danger)
      );

      await channel.send({ content: `<@${interaction.user.id}>`, embeds: [embed], components: [row] });
    }

    await interaction.reply({ content: `‚úÖ ${isApp ? '–ó–∞—è–≤–∫–∞' : '–¢—ñ–∫–µ—Ç'} —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${channel}`, ephemeral: true });
  }
});

// Slash –∫–æ–º–∞–Ω–¥–∞
const commands = [
  new SlashCommandBuilder()
    .setName('ticketsetup')
    .setDescription('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫/–ø—ñ–¥—Ç—Ä–∏–º–∫–∏')
].map(cmd => cmd.toJSON());

const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
(async () => {
  try {
    console.log('üîÑ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥...');
    await rest.put(Routes.applicationCommands(process.env.CLIENT_ID), { body: commands });
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ');
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥:', err);
  }
})();

// Express –¥–ª—è Render
const app = express();
app.get('/', (req, res) => res.send('Bot is live!'));
app.listen(3000, () => console.log('üåê Web server –∞–∫—Ç–∏–≤–Ω–∏–π'));

client.login(process.env.DISCORD_TOKEN);

import fetch from 'node-fetch';

// –ü—ñ–Ω–≥ —Å–µ–±–µ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
setInterval(() => {
  fetch('https://discordbot-kmzu.onrender.com')
    .then(() => console.log('üì∂ KeepAlive ping sent'))
    .catch(err => console.warn('‚ö†Ô∏è KeepAlive error', err));
}, 5 * 60 * 1000);
